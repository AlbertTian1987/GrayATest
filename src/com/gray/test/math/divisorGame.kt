package com.gray.test.math

/***
 * 1025. 除数博弈
 * 爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。
 * 最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：
 * 选出任一 x，满足 0 < x < N 且 N % x == 0 。
 * 用 N - x 替换黑板上的数字 N 。
 * 如果玩家无法执行这些操作，就会输掉游戏。
 * 只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。
 *
 * 示例 1：
 * 输入：2
 * 输出：true
 * 解释：爱丽丝选择 1，鲍勃无法进行操作。
 *
 * 示例 2：
 * 输入：3
 * 输出：false
 * 解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。
 *
 * 提示：
 * 1 <= N <= 1000
 */
/**
 * 思路：拿到偶数的A只要不断做-1操作，把奇数还给对手B，
 * 奇数的因数只有奇数，两个奇数相减得到偶数，所以下一次A还是得到偶数，
 * 这么持续，A总归会得到最小偶数2，他再-1，杀死游戏
 * 所以，先手方得到偶数就赢定了
 */
fun divisorGame(N: Int): Boolean {
    return N % 2 == 0
}