package com.gray.test.math

/**
 * 371. 两整数之和
 * 不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。
 *
 * 示例 1:
 * 输入: a = 1, b = 2
 * 输出: 3
 *
 * 示例 2:
 * 输入: a = -2, b = 3
 * 输出: 1
 * */
/**
 * 两个整数a, b; a ^ b是无进位的相加； a&b得到每一位的进位；让无进位相加的结果与进位不断的异或， 直到进位为0；
 *
 * 比如5+3
 * 异或这里可看做是相加但是不显现进位，5 xor 3
 *             0 1 0 1
 *             0 0 1 1
 *           ------------
 *             0 1 1 0
 * 上面的如果看成传统的加法，不就是1+1=2，进1得0，但是这里没有显示进位出来，仅是相加，0+1或者是1+0都不用进位
 *
 * 相与为了让进位显现出来
 *              0 1 0 1
 *              0 0 1 1
 *           ------------
 *              0 0 0 1
 * 上面的最低位1和1相与得1，而在二进制加法中，这里1+1也应该是要进位的，所以刚好吻合，但是这个进位1应该要再往前一位，所以左移一位
 */
tailrec fun getSum(a: Int, b: Int): Int {
    if (a == 0) {
        return b
    }
    val sum = a xor b
    val carry = (a and b) shl 1
    return getSum(carry, sum)
}

fun main() {
    println(getSum(2, 3))
    println(getSum(2, -3))
}